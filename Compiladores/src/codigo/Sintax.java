
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 26 18:21:18 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 26 18:21:18 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\003\005\000\002" +
    "\003\005\000\002\007\004\000\002\010\005\000\002\015" +
    "\005\000\002\015\006\000\002\015\010\000\002\015\007" +
    "\000\002\015\012\000\002\016\004\000\002\011\012\000" +
    "\002\011\012\000\002\011\012\000\002\011\012\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\007\000\002\012\013" +
    "\000\002\012\014\000\002\017\034\000\002\021\007\000" +
    "\002\021\007\000\002\021\007\000\002\021\007\000\002" +
    "\021\007\000\002\021\007\000\002\020\007\000\002\020" +
    "\010\000\002\020\010\000\002\023\007\000\002\024\007" +
    "\000\002\024\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\007\000\002\025\006\000\002\026\011\000\002" +
    "\026\012\000\002\026\012\000\002\030\005\000\002\030" +
    "\006\000\002\027\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\024\005\013\007\025\016\023\017\015\032" +
    "\010\033\022\052\017\056\004\057\012\001\002\000\004" +
    "\020\260\001\002\000\036\002\ufffe\005\ufffe\007\ufffe\016" +
    "\ufffe\017\ufffe\021\ufffe\032\ufffe\033\ufffe\052\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\001\002\000\036\002" +
    "\ufff0\005\ufff0\007\ufff0\016\ufff0\017\ufff0\021\ufff0\032\ufff0" +
    "\033\ufff0\052\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\001\002\000\036\002\uffea\005\uffea\007\uffea\016\uffea" +
    "\017\uffea\021\uffea\032\uffea\033\uffea\052\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\001\002\000\004\034\171" +
    "\001\002\000\036\002\ufffc\005\ufffc\007\ufffc\016\ufffc\017" +
    "\ufffc\021\ufffc\032\ufffc\033\ufffc\052\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\001\002\000\004\034\243\001" +
    "\002\000\004\020\200\001\002\000\026\002\000\005\013" +
    "\007\025\016\023\017\015\032\010\033\022\052\017\056" +
    "\004\057\012\001\002\000\006\032\155\033\156\001\002" +
    "\000\036\002\uffee\005\uffee\007\uffee\016\uffee\017\uffee\021" +
    "\uffee\032\uffee\033\uffee\052\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\001\002\000\004\033\022\001\002\000" +
    "\036\002\ufff6\005\ufff6\007\ufff6\016\ufff6\017\ufff6\021\ufff6" +
    "\032\ufff6\033\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\001\002\000\036\002\ufff8\005\ufff8\007\ufff8" +
    "\016\ufff8\017\ufff8\021\ufff8\032\ufff8\033\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002\000\004" +
    "\030\123\001\002\000\004\030\101\001\002\000\036\002" +
    "\ufffa\005\ufffa\007\ufffa\016\ufffa\017\ufffa\021\ufffa\032\ufffa" +
    "\033\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\001\002\000\004\020\033\001\002\000\036\002\uffec" +
    "\005\uffec\007\uffec\016\uffec\017\uffec\021\uffec\032\uffec\033" +
    "\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\001\002\000\036\002\ufff4\005\ufff4\007\ufff4\016\ufff4\017" +
    "\ufff4\021\ufff4\032\ufff4\033\ufff4\052\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\001\002\000\036\002\ufff2\005" +
    "\ufff2\007\ufff2\016\ufff2\017\ufff2\021\ufff2\032\ufff2\033\ufff2" +
    "\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\001" +
    "\002\000\004\002\032\001\002\000\004\002\001\001\002" +
    "\000\004\033\022\001\002\000\004\020\035\001\002\000" +
    "\024\005\013\007\025\016\023\017\015\032\010\033\022" +
    "\052\017\056\004\057\012\001\002\000\032\005\013\007" +
    "\025\016\023\017\015\021\045\032\010\033\022\052\017" +
    "\054\037\055\042\056\004\057\012\001\002\000\004\021" +
    "\056\001\002\000\036\002\uffff\005\uffff\007\uffff\016\uffff" +
    "\017\uffff\021\uffff\032\uffff\033\uffff\052\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\001\002\000\036\002\ufff1" +
    "\005\ufff1\007\ufff1\016\ufff1\017\ufff1\021\ufff1\032\ufff1\033" +
    "\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\001\002\000\004\021\055\001\002\000\036\002\uffeb\005" +
    "\uffeb\007\uffeb\016\uffeb\017\uffeb\021\uffeb\032\uffeb\033\uffeb" +
    "\052\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001" +
    "\002\000\036\002\ufffd\005\ufffd\007\ufffd\016\ufffd\017\ufffd" +
    "\021\ufffd\032\ufffd\033\ufffd\052\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\001\002\000\036\002\uffcc\005\uffcc" +
    "\007\uffcc\016\uffcc\017\uffcc\021\uffcc\032\uffcc\033\uffcc\052" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002" +
    "\000\036\002\uffef\005\uffef\007\uffef\016\uffef\017\uffef\021" +
    "\uffef\032\uffef\033\uffef\052\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\001\002\000\036\002\ufff7\005\ufff7\007" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\032\ufff7\033\ufff7\052\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002\000" +
    "\036\002\ufff9\005\ufff9\007\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\032\ufff9\033\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\001\002\000\036\002\ufffb\005\ufffb\007\ufffb" +
    "\016\ufffb\017\ufffb\021\ufffb\032\ufffb\033\ufffb\052\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002\000\036" +
    "\002\uffed\005\uffed\007\uffed\016\uffed\017\uffed\021\uffed\032" +
    "\uffed\033\uffed\052\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\001\002\000\036\002\ufff5\005\ufff5\007\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\032\ufff5\033\ufff5\052\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\036\002" +
    "\ufff3\005\ufff3\007\ufff3\016\ufff3\017\ufff3\021\ufff3\032\ufff3" +
    "\033\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\001\002\000\036\002\uffca\005\uffca\007\uffca\016\uffca" +
    "\017\uffca\021\uffca\032\uffca\033\uffca\052\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\001\002\000\036\002\uffcb" +
    "\005\uffcb\007\uffcb\016\uffcb\017\uffcb\021\uffcb\032\uffcb\033" +
    "\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\001\002\000\014\010\064\015\060\035\061\036\062\037" +
    "\063\001\002\000\004\031\077\001\002\000\004\031\075" +
    "\001\002\000\004\031\073\001\002\000\004\031\071\001" +
    "\002\000\006\031\065\034\066\001\002\000\004\021\070" +
    "\001\002\000\004\021\067\001\002\000\004\020\uffd1\001" +
    "\002\000\004\020\uffd2\001\002\000\004\021\072\001\002" +
    "\000\004\020\uffce\001\002\000\004\021\074\001\002\000" +
    "\004\020\uffcd\001\002\000\004\021\076\001\002\000\004" +
    "\020\uffd0\001\002\000\004\021\100\001\002\000\004\020" +
    "\uffcf\001\002\000\044\002\uffe7\005\uffe7\007\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\022\103\031\102\032\uffe7\033\uffe7\034" +
    "\104\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\001\002\000\036\002\uffe9\005\uffe9\007\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\032\uffe9\033\uffe9\052\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\001\002\000\004\023\105\001" +
    "\002\000\036\002\uffe8\005\uffe8\007\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\032\uffe8\033\uffe8\052\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\001\002\000\004\033\022\001\002" +
    "\000\012\011\111\012\110\013\112\014\107\001\002\000" +
    "\004\033\022\001\002\000\004\033\022\001\002\000\004" +
    "\033\022\001\002\000\004\033\022\001\002\000\004\026" +
    "\114\001\002\000\036\002\uffdd\005\uffdd\007\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\032\uffdd\033\uffdd\052\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002\000\004\026\116" +
    "\001\002\000\036\002\uffdf\005\uffdf\007\uffdf\016\uffdf\017" +
    "\uffdf\021\uffdf\032\uffdf\033\uffdf\052\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\001\002\000\004\026\120\001" +
    "\002\000\036\002\uffde\005\uffde\007\uffde\016\uffde\017\uffde" +
    "\021\uffde\032\uffde\033\uffde\052\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\001\002\000\004\026\122\001\002" +
    "\000\036\002\uffdc\005\uffdc\007\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\032\uffdc\033\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\001\002\000\066\002\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\026\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\052\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\001\002\000\004\020" +
    "\125\001\002\000\004\032\126\001\002\000\004\033\022" +
    "\001\002\000\004\032\130\001\002\000\004\020\131\001" +
    "\002\000\024\005\013\007\025\016\023\017\015\032\010" +
    "\033\022\052\017\056\004\057\012\001\002\000\026\005" +
    "\013\007\025\016\023\017\015\021\133\032\010\033\022" +
    "\052\017\056\004\057\012\001\002\000\004\034\134\001" +
    "\002\000\004\020\135\001\002\000\024\005\013\007\025" +
    "\016\023\017\015\032\010\033\022\052\017\056\004\057" +
    "\012\001\002\000\026\005\013\007\025\016\023\017\015" +
    "\021\137\032\010\033\022\052\017\056\004\057\012\001" +
    "\002\000\004\034\140\001\002\000\004\020\141\001\002" +
    "\000\024\005\013\007\025\016\023\017\015\032\010\033" +
    "\022\052\017\056\004\057\012\001\002\000\026\005\013" +
    "\007\025\016\023\017\015\021\143\032\010\033\022\052" +
    "\017\056\004\057\012\001\002\000\004\034\144\001\002" +
    "\000\004\020\145\001\002\000\024\005\013\007\025\016" +
    "\023\017\015\032\010\033\022\052\017\056\004\057\012" +
    "\001\002\000\026\005\013\007\025\016\023\017\015\021" +
    "\147\032\010\033\022\052\017\056\004\057\012\001\002" +
    "\000\004\053\150\001\002\000\004\020\151\001\002\000" +
    "\024\005\013\007\025\016\023\017\015\032\010\033\022" +
    "\052\017\056\004\057\012\001\002\000\026\005\013\007" +
    "\025\016\023\017\015\021\153\032\010\033\022\052\017" +
    "\056\004\057\012\001\002\000\004\021\154\001\002\000" +
    "\036\002\uffd3\005\uffd3\007\uffd3\016\uffd3\017\uffd3\021\uffd3" +
    "\032\uffd3\033\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\001\002\000\006\033\022\034\161\001\002" +
    "\000\004\030\157\001\002\000\036\002\uffe6\005\uffe6\007" +
    "\uffe6\016\uffe6\017\uffe6\021\uffe6\032\uffe6\033\uffe6\052\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\001\002\000" +
    "\004\034\175\001\002\000\024\005\013\007\025\016\023" +
    "\017\015\032\010\033\022\052\017\056\004\057\012\001" +
    "\002\000\024\005\013\007\025\016\023\017\015\032\170" +
    "\033\022\052\017\056\004\057\012\001\002\000\026\005" +
    "\ufff2\007\ufff2\011\164\016\ufff2\017\ufff2\032\ufff2\033\ufff2" +
    "\052\ufff2\056\ufff2\057\ufff2\001\002\000\004\034\165\001" +
    "\002\000\004\033\022\001\002\000\004\032\167\001\002" +
    "\000\036\002\uffe1\005\uffe1\007\uffe1\016\uffe1\017\uffe1\021" +
    "\uffe1\032\uffe1\033\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\001\002\000\040\002\uffe2\005\uffe2\007" +
    "\uffe2\016\uffe2\017\uffe2\021\uffe2\032\uffe2\033\uffe2\034\171" +
    "\052\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\001" +
    "\002\000\006\032\172\033\022\001\002\000\036\002\uffe5" +
    "\005\uffe5\007\uffe5\016\uffe5\017\uffe5\021\uffe5\032\uffe5\033" +
    "\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\001\002\000\004\032\174\001\002\000\036\002\uffe4\005" +
    "\uffe4\007\uffe4\016\uffe4\017\uffe4\021\uffe4\032\uffe4\033\uffe4" +
    "\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\001" +
    "\002\000\004\031\176\001\002\000\004\032\177\001\002" +
    "\000\036\002\uffe3\005\uffe3\007\uffe3\016\uffe3\017\uffe3\021" +
    "\uffe3\032\uffe3\033\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\001\002\000\004\033\022\001\002\000" +
    "\006\006\203\020\202\001\002\000\024\005\013\007\025" +
    "\016\023\017\015\032\010\033\022\052\017\056\004\057" +
    "\012\001\002\000\004\020\204\001\002\000\024\005\013" +
    "\007\025\016\023\017\015\032\010\033\022\052\017\056" +
    "\004\057\012\001\002\000\026\005\013\007\025\016\023" +
    "\017\015\021\206\032\010\033\022\052\017\056\004\057" +
    "\012\001\002\000\004\045\207\001\002\000\004\020\210" +
    "\001\002\000\024\005\013\007\025\016\023\017\015\032" +
    "\010\033\022\052\017\056\004\057\012\001\002\000\026" +
    "\005\013\007\025\016\023\017\015\021\212\032\010\033" +
    "\022\052\017\056\004\057\012\001\002\000\036\002\uffd4" +
    "\005\uffd4\007\uffd4\016\uffd4\017\uffd4\021\uffd4\032\uffd4\033" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\001\002\000\026\005\013\007\025\016\023\017\015\021" +
    "\214\032\010\033\022\052\017\056\004\057\012\001\002" +
    "\000\004\045\215\001\002\000\004\020\216\001\002\000" +
    "\024\005\013\007\025\016\023\017\015\032\010\033\022" +
    "\052\017\056\004\057\012\001\002\000\026\005\013\007" +
    "\025\016\023\017\015\021\220\032\010\033\022\052\017" +
    "\056\004\057\012\001\002\000\036\002\uffd5\005\uffd5\007" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\032\uffd5\033\uffd5\052\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001\002\000" +
    "\014\010\226\015\222\035\223\036\225\037\224\001\002" +
    "\000\004\031\241\001\002\000\004\031\237\001\002\000" +
    "\004\031\235\001\002\000\004\031\233\001\002\000\006" +
    "\031\227\034\230\001\002\000\004\021\232\001\002\000" +
    "\004\021\231\001\002\000\006\006\uffda\020\uffda\001\002" +
    "\000\006\006\uffdb\020\uffdb\001\002\000\004\021\234\001" +
    "\002\000\006\006\uffd6\020\uffd6\001\002\000\004\021\236" +
    "\001\002\000\006\006\uffd7\020\uffd7\001\002\000\004\021" +
    "\240\001\002\000\006\006\uffd9\020\uffd9\001\002\000\004" +
    "\021\242\001\002\000\006\006\uffd8\020\uffd8\001\002\000" +
    "\004\020\244\001\002\000\004\030\253\001\002\000\004" +
    "\020\246\001\002\000\024\005\013\007\025\016\023\017" +
    "\015\032\010\033\022\052\017\056\004\057\012\001\002" +
    "\000\026\005\013\007\025\016\023\017\015\032\010\033" +
    "\022\052\017\056\004\057\012\060\250\001\002\000\004" +
    "\033\022\001\002\000\004\021\252\001\002\000\036\002" +
    "\uffbd\005\uffbd\007\uffbd\016\uffbd\017\uffbd\021\uffbd\032\uffbd" +
    "\033\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\001\002\000\006\021\254\030\255\001\002\000\004" +
    "\020\uffbf\001\002\000\004\021\256\001\002\000\004\020" +
    "\uffbe\001\002\000\004\020\266\001\002\000\004\016\261" +
    "\001\002\000\004\030\262\001\002\000\004\031\263\001" +
    "\002\000\004\021\264\001\002\000\004\020\uffc9\001\002" +
    "\000\004\020\307\001\002\000\004\033\022\001\002\000" +
    "\014\010\274\015\270\035\271\036\273\037\272\001\002" +
    "\000\004\031\305\001\002\000\004\031\303\001\002\000" +
    "\004\031\301\001\002\000\004\031\277\001\002\000\004" +
    "\031\275\001\002\000\004\021\276\001\002\000\004\020" +
    "\uffc8\001\002\000\004\021\300\001\002\000\004\020\uffc4" +
    "\001\002\000\004\021\302\001\002\000\004\020\uffc5\001" +
    "\002\000\004\021\304\001\002\000\004\020\uffc7\001\002" +
    "\000\004\021\306\001\002\000\004\020\uffc6\001\002\000" +
    "\004\061\320\001\002\000\004\020\311\001\002\000\024" +
    "\005\013\007\025\016\023\017\015\032\010\033\022\052" +
    "\017\056\004\057\012\001\002\000\032\005\013\007\025" +
    "\016\023\017\015\021\315\032\010\033\022\052\017\054" +
    "\313\055\314\056\004\057\012\001\002\000\004\021\317" +
    "\001\002\000\004\021\316\001\002\000\036\002\uffc2\005" +
    "\uffc2\007\uffc2\016\uffc2\017\uffc2\021\uffc2\032\uffc2\033\uffc2" +
    "\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\036\002\uffc0\005\uffc0\007\uffc0\016\uffc0\017\uffc0" +
    "\021\uffc0\032\uffc0\033\uffc0\052\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\001\002\000\036\002\uffc1\005\uffc1" +
    "\007\uffc1\016\uffc1\017\uffc1\021\uffc1\032\uffc1\033\uffc1\052" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\004\030\321\001\002\000\004\021\322\001\002\000" +
    "\004\020\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\034\002\030\003\004\006\013\007\010\010" +
    "\023\011\020\012\017\015\026\016\027\017\005\020\015" +
    "\026\025\027\006\001\001\000\004\023\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\200\001\001\000\030\003\037\007\043\010\050\011\047" +
    "\012\046\015\052\016\053\017\040\020\045\026\051\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\056\001\001\000\002\001\001\000\032\003\004\006" +
    "\035\007\010\010\023\011\020\012\017\015\026\016\027" +
    "\017\005\020\015\026\025\027\006\001\001\000\030\003" +
    "\037\007\043\010\050\011\047\012\046\015\052\016\053" +
    "\017\040\020\045\026\051\027\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\105\001\001\000" +
    "\002\001\001\000\004\016\120\001\001\000\004\016\116" +
    "\001\001\000\004\016\114\001\001\000\004\016\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\004\006\131" +
    "\007\010\010\023\011\020\012\017\015\026\016\027\017" +
    "\005\020\015\026\025\027\006\001\001\000\030\003\037" +
    "\007\043\010\050\011\047\012\046\015\052\016\053\017" +
    "\040\020\045\026\051\027\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\004\006\135\007\010\010" +
    "\023\011\020\012\017\015\026\016\027\017\005\020\015" +
    "\026\025\027\006\001\001\000\030\003\037\007\043\010" +
    "\050\011\047\012\046\015\052\016\053\017\040\020\045" +
    "\026\051\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\004\006\141\007\010\010\023\011\020" +
    "\012\017\015\026\016\027\017\005\020\015\026\025\027" +
    "\006\001\001\000\030\003\037\007\043\010\050\011\047" +
    "\012\046\015\052\016\053\017\040\020\045\026\051\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\004\006\145\007\010\010\023\011\020\012\017\015" +
    "\026\016\027\017\005\020\015\026\025\027\006\001\001" +
    "\000\030\003\037\007\043\010\050\011\047\012\046\015" +
    "\052\016\053\017\040\020\045\026\051\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\004\006" +
    "\151\007\010\010\023\011\020\012\017\015\026\016\027" +
    "\017\005\020\015\026\025\027\006\001\001\000\030\003" +
    "\037\007\043\010\050\011\047\012\046\015\052\016\053" +
    "\017\040\020\045\026\051\027\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\004\006\161\007\010\010\023\011\020\012\017\015\026" +
    "\016\162\017\005\020\015\026\025\027\006\001\001\000" +
    "\030\003\037\007\043\010\050\011\047\012\046\015\052" +
    "\016\053\017\040\020\045\026\051\027\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\220\001\001\000\002\001\001" +
    "\000\032\003\004\006\212\007\010\010\023\011\020\012" +
    "\017\015\026\016\027\017\005\020\015\026\025\027\006" +
    "\001\001\000\002\001\001\000\032\003\004\006\204\007" +
    "\010\010\023\011\020\012\017\015\026\016\027\017\005" +
    "\020\015\026\025\027\006\001\001\000\030\003\037\007" +
    "\043\010\050\011\047\012\046\015\052\016\053\017\040" +
    "\020\045\026\051\027\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\004\006\210\007\010\010\023" +
    "\011\020\012\017\015\026\016\027\017\005\020\015\026" +
    "\025\027\006\001\001\000\030\003\037\007\043\010\050" +
    "\011\047\012\046\015\052\016\053\017\040\020\045\026" +
    "\051\027\042\001\001\000\002\001\001\000\030\003\037" +
    "\007\043\010\050\011\047\012\046\015\052\016\053\017" +
    "\040\020\045\026\051\027\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\004\006\216\007\010\010" +
    "\023\011\020\012\017\015\026\016\027\017\005\020\015" +
    "\026\025\027\006\001\001\000\030\003\037\007\043\010" +
    "\050\011\047\012\046\015\052\016\053\017\040\020\045" +
    "\026\051\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\004\006\246\007\010" +
    "\010\023\011\020\012\017\015\026\016\027\017\005\020" +
    "\015\026\025\027\006\001\001\000\030\003\037\007\043" +
    "\010\050\011\047\012\046\015\052\016\053\017\040\020" +
    "\045\026\051\027\042\001\001\000\004\016\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\307\001\001\000\004\016\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\004\006\311\007\010\010" +
    "\023\011\020\012\017\015\026\016\027\017\005\020\015" +
    "\026\025\027\006\001\001\000\030\003\037\007\043\010" +
    "\050\011\047\012\046\015\052\016\053\017\040\020\045" +
    "\026\051\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PROCEDIMIENTO ::= Proc Cadena ARG Llave_a ESTRUCTURAS Return EXPVAR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARG ::= Llave_a Identificador Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARG ::= Llave_a Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESTRUCTURAFOR ::= For STARTFOR TESTFOR NEXTFOR Llave_a ESTRUCTURAS Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAFOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESTRUCTURAFOR ::= For STARTFOR TESTFOR NEXTFOR Llave_a ESTRUCTURAS Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAFOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESTRUCTURAFOR ::= For STARTFOR TESTFOR NEXTFOR Llave_a ESTRUCTURAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAFOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NEXTFOR ::= Llave_a Incr Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXTFOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TESTFOR ::= Llave_a EXPVAR Menor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTFOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TESTFOR ::= Llave_a EXPVAR Mayor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTFOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TESTFOR ::= Llave_a EXPVAR Menor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTFOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TESTFOR ::= Llave_a EXPVAR Mayor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTFOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TESTFOR ::= Llave_a EXPVAR Igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTFOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STARTFOR ::= Llave_a Set Identificador Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTFOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURAWHILE ::= While TESTWHILE Llave_a ESTRUCTURAS Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAWHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ESTRUCTURAWHILE ::= While TESTWHILE Llave_a ESTRUCTURAS Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAWHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURAWHILE ::= While TESTWHILE Llave_a ESTRUCTURAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAWHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TESTWHILE ::= Llave_a EXPVAR Menor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TESTWHILE ::= Llave_a EXPVAR Mayor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TESTWHILE ::= Llave_a EXPVAR Menor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TESTWHILE ::= Llave_a EXPVAR Mayor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TESTWHILE ::= Llave_a EXPVAR Igual Cadena Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TESTWHILE ::= Llave_a EXPVAR Igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURASWITCH ::= Switch EXPVAR Llave_a Comillas EXPVAR Comillas Llave_a ESTRUCTURAS Llave_c Cadena Llave_a ESTRUCTURAS Llave_c Cadena Llave_a ESTRUCTURAS Llave_c Cadena Llave_a ESTRUCTURAS Llave_c Default Llave_a ESTRUCTURAS Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURASWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-25)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURAIF ::= If TESTIF Then Llave_a ESTRUCTURAS Llave_c Else Llave_a ESTRUCTURAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAIF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURAIF ::= If TESTIF Llave_a ESTRUCTURAS Llave_c Else Llave_a ESTRUCTURAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAIF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TESTIF ::= Llave_a EXPVAR Menor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TESTIF ::= Llave_a EXPVAR Mayor_igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TESTIF ::= Llave_a EXPVAR Menor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TESTIF ::= Llave_a EXPVAR Mayor Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TESTIF ::= Llave_a EXPVAR Igual Cadena Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TESTIF ::= Llave_a EXPVAR Igual Numero Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTIF",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EJECUTAREXPR ::= Set Identificador Corchete_a Expr EXPVAR Division EXPVAR Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAREXPR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EJECUTAREXPR ::= Set Identificador Corchete_a Expr EXPVAR Multiplicacion EXPVAR Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAREXPR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EJECUTAREXPR ::= Set Identificador Corchete_a Expr EXPVAR Resta EXPVAR Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAREXPR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EJECUTAREXPR ::= Set Identificador Corchete_a Expr EXPVAR Suma EXPVAR Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJECUTAREXPR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPVAR ::= Dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPVAR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AGRUPAR_PAL ::= Puts Comillas Cadena EXPVAR Suma Cadena EXPVAR Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGRUPAR_PAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AGRUPAR_PAL ::= Puts Comillas Cadena ESTRUCTURAS Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGRUPAR_PAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AGRUPAR_PAL ::= Puts Comillas EXPVAR Cadena Numero Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGRUPAR_PAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AGRUPAR_PAL ::= Comillas Cadena EXPVAR Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGRUPAR_PAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AGRUPAR_PAL ::= Comillas Cadena Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGRUPAR_PAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MOSTRARVAL ::= Puts Dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRARVAL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VERVALOR ::= Set Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERVALOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNARVAL ::= Set Identificador Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNARVAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNARVAL ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNARVAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURAS ::= PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURAS ::= ESTRUCTURAS PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURAS ::= ESTRUCTURAFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURAS ::= ESTRUCTURAS ESTRUCTURAFOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTRUCTURAS ::= ESTRUCTURAWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURAS ::= ESTRUCTURAS ESTRUCTURAWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURAS ::= ESTRUCTURASWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURAS ::= ESTRUCTURAS ESTRUCTURASWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURAS ::= EXPVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURAS ::= ESTRUCTURAS EXPVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURAS ::= AGRUPAR_PAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURAS ::= ESTRUCTURAS AGRUPAR_PAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURAS ::= ESTRUCTURAIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURAS ::= ESTRUCTURAS ESTRUCTURAIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURAS ::= EJECUTAREXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURAS ::= ESTRUCTURAS EJECUTAREXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURAS ::= MOSTRARVAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURAS ::= ESTRUCTURAS MOSTRARVAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURAS ::= VERVALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURAS ::= ESTRUCTURAS VERVALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURAS ::= ASIGNARVAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTRUCTURAS ::= ESTRUCTURAS ASIGNARVAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ESTRUCTURAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

